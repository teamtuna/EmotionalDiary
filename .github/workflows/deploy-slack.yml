# This is a basic workflow to help you get started with Actions

name: Deploy APKs

# Controls when the workflow will run
on:
  push:
    branches: [ develop, master ]
    tags:
      - v*.*
      - test/*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    input:
      loglevel:
        description: 'Log Level'
        required: true
        default: 'warning'
      name:
        description: 'Deploy APK'
        required: true
        default: 'Deploy'

env:
  JAVA: 1.8
  ANDROID_WORKFLOW_PAT: ${{secrets.GIT_TUNA_WORKFLOW_TOKEN}}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-debug-apk:
    # The type of runner that the job will run on
    name: Build Debug APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build with Gradle
        shell: bash
        run: |
          ./gradlew --no-daemon app:assembleDebug

      # Debug APK Path 세팅
      - name: Set APK path
        id: apk
        shell: bash
        run: |
          echo "::set-output name=DEBUG_APK_PATH::$(find . -name app-debug.apk)"
          echo "::set-output name=DEBUG_APK_NAME::$(basename $(find . -name app-debug.apk))"

      # APK 업로드
      - name: Upload APK as an artifact
        uses: actions/upload-artifact@v2
        with:
          path: ${{ steps.apk.outputs.DEBUG_APK_PATH }}
          name: ${{ steps.apk.outputs.DEBUG_APK_NAME }}
  deploy:
    name: Deploy APKs to slack
    needs:
      - build-debug-apk
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get git log
        id: git-log
        shell: bash
        run: |
          latestReleaseTag=$(git tag -l [0-9].* | tail -n1)
          git log -n 3 --no-merges $latestReleaseTag..HEAD --oneline --pretty=format:"· %s | %cn" | jq -R . | sed -e 's/^"//' -e 's/"$//' >> gitlog.txt
          cat gitlog.txt

      - name: Download APKs
        uses: actions/download-artifact@v2

      - name: Set APKs path to environment variables
        id: apk
        shell: bash
        run: |
          find . -type f -name app-debug.apk
          echo "::set-output name=DEBUG_APK_PATH::$(find . -type f -name app-debug.apk)"
          echo "::set-output name=DEBUG_APK_NAME::$(basename $(find . -type f -name app-debug.apk))"

      - name: Upload APKs to Slack
        shell: bash
        run: |
          ref=${GITHUB_REF#refs/}
          sha=${GITHUB_SHA::8}
          gitlog="$(cat gitlog.txt)"
          debug_permalink=$(curl https://slack.com/api/files.upload -H "Authorization: Bearer ${{ secrets.ANDROID_BOT_TOKEN }}" -F file=@${{ steps.apk.outputs.DEBUG_APK_PATH }} -F channels=CPMANENF3 -F thread_ts='1607309305.245800' | jq -r '.file.url_private_download')
          curl https://slack.com/api/chat.postMessage -X POST -H 'Authorization: Bearer ${{ secrets.ANDROID_BOT_TOKEN }}' -H 'Content-type: application/json' --data '{"channel":"CPMANENF3","attachments": [{ "color":"#FF7E36", "fields": [{"title":"Publisher","value":"${{ github.actor }}","short":true}, {"title":"Build Variant","value":"Debug","short":true}, {"title":"Ref","value":"'"$ref"'","short":true}, {"title":"Sha", "value":"'"$sha"'","short":true}, {"title":"Recent changes","value":"'"$gitlog"'","short":false}],"actions": [{ "type": "button", "name": "download", "text": "${{ steps.apk.outputs.DEBUG_APK_NAME }}", "url": "'"$debug_permalink"'", "style": "primary" }] }] }'
